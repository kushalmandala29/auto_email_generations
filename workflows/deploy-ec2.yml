name: Deploy to AWS

on:
  push:
    branches:
      - main  # Trigger this workflow on pushes to the 'main' branch

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Amazon ECR
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: "us-east-1"
      run: |
        aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin <aws-account-id>.dkr.ecr.$AWS_REGION.amazonaws.com

    - name: Build Docker image
      run: |
        docker build -t your-app-image-name:latest .

    - name: Tag Docker image
      run: |
        docker tag your-app-image-name:latest <aws-account-id>.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/your-ecr-repo:latest

    - name: Push Docker image to ECR
      run: |
        docker push <aws-account-id>.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/your-ecr-repo:latest

    - name: SSH to EC2 and Deploy Docker Container
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        # SSH into your EC2 instance and pull the new Docker image, then restart the container
        ssh -o "StrictHostKeyChecking=no" -i ~/.ssh/your-ec2-key.pem ec2-user@<ec2-public-ip> << 'EOF'
          docker pull <aws-account-id>.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/your-ecr-repo:latest
          docker stop your-container-name || true
          docker rm your-container-name || true
          docker run -d -p 80:80 --name your-container-name <aws-account-id>.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/your-ecr-repo:latest
        EOF
